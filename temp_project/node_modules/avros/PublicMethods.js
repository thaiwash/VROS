
const EventEmitter = require('events');

module.exports = class PublicMethods extends EventEmitter {
	constructor() {
        super()
	}
	
	// Function: getPlayerSocket
	// Returns socket.IO component of the connected player
	getPlayerSocket(playerName) {
		var self = this
		var sockets = this.io.sockets.clients()
		
		var keys = Object.keys(sockets["sockets"])
		for (var i = 0; i < keys.length; i ++) {
			if (sockets.sockets[keys[i]].playerName == playerName) {
				if (isVoid(sockets.sockets[keys[i]])) {
					self.systemMessage("warnng: player "+playerName+" doesnt have a socket")
				}
				return sockets.sockets[keys[i]]
			}
		}
	}
	
	// Function: objectExists
	// Returns true or false
	objectExists(playerName, objectId) {
		for (var i2 = 0; i2 < this.players[playerName].objects.length; i2 ++) {
			if (this.players[playerName].objects[i2].object_id == objectId) {
				return true
			}
		}
		return false
	}
	
	// Function: getObjectById
	// Returns object by id
	getObjectById(playerName, objectId) {
		for (var i2 = 0; i2 < this.players[playerName].objects.length; i2 ++) {
			if (this.players[playerName].objects[i2].object_id == objectId) {
				return this.players[playerName].objects[i2]
			}
		}
	}
	
	// Function: allObjects
	// Returns raw syntax objects from all players
	allObjects() {
		var objs = []
		var playerNames = Object.keys(this.players)
		for (var i = 0; i < playerNames.length; i ++) {
			if (isVoid(this.players[playerNames[i]].objects)) {
				this.players[playerNames[i]].objects = []
			}
			for (var i2 = 0; i2 < this.players[playerNames[i]].objects.length; i2 ++) {
				objs.push(this.players[playerNames[i]].objects[i2])
			}
		}
		return objs
	}
}


function isVoid(variable) {
	if (typeof variable === "undefined") {
        return true
	}
    return false
}
