
//https://www.shadertoy.com/view/wtBXRz


// based on meshula https://www.shadertoy.com/view/MlSXR3

/* notes : 
	uv: range [0:1]
	k1: the main distortion 
		positive = barrel, negative = pincushion
	k2: tweaks the edges of distortion
		can be 0.0
*/

vec2 brownConradyDistortion(in vec2 uv, in float k1, in float k2)
{
    uv = uv * 2.0 - 1.0;	// brown conrady takes [-1:1]

    // positive values of K1 give barrel distortion, negative give pincushion
    float r2 = uv.x*uv.x + uv.y*uv.y;
    uv *= 1.0 + k1 * r2 + k2 * r2 * r2;
    
    // tangential distortion (due to off center lens elements)
    // is not modeled in this function, but if it was, the terms would go here
    
    uv = (uv * .5 + .5);	// restore -> [0:1]
    return uv;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy;    
    
    float k1 = -.2 + .7 * (sin( iTime * .5) * .5 + .5);  // [-.25 : 0.75 ]
    float k2 = 0.;//
    
    if (iMouse.z > 0.){
        k1 = iMouse.x / iResolution.x * .7 - .2;
        k2 = 1. - (iMouse.y / iResolution.y) * 1.25 - .25;
    }

    uv = brownConradyDistortion( uv, k1, k2 );
    
    // using the distortion param as a scale factor, to keep the image close to the viewport dims
    float scale = abs(k1) < 1. ? 1.-abs(k1) : 1./ (k1+1.);		
    
    uv = uv * scale - (scale * .5) + .5;	// scale from center
    vec3 c = texture(iChannel0, uv).rgb;
   
    
    // darken outside uv range
    vec2 uv2 = abs(uv * 2. - 1.);
    vec2 border = 1.-smoothstep(vec2(.95),vec2(1.0),uv2);
    c *= mix(.2, 1.0, border.x * border.y);
    
    // vignette
    float vignetteRange = clamp(k1, 0., .2);
    float dist = distance(uv, vec2(0.5, 0.5));
    dist = (dist - (.707 - vignetteRange)) / vignetteRange;
    float mult = smoothstep(1.0, .0, dist);
    c *= mult;

    
	fragColor = vec4(c, 1.);
}